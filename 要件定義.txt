【仮想通貨取引Bot 要件定義】

■ 1. 機能要件

【取引所接続と認証】
- bybitテストネットのAPIに接続し、口座情報の取得、注文発注、注文キャンセル、注文状況の確認を行う。
- APIキーおよびシークレットの安全な管理（暗号化保存や環境変数での管理）。

【マーケットデータの取得】
- リアルタイムの価格、注文板、取引量などのデータ取得。
- 過去1ヶ月間、または必要に応じてより長期間のヒストリカルデータ（例：数年分）を取得し、バックテストおよび機械学習のトレーニングデータとして利用可能にする。

【注文発注システム】
- 指値注文、成行注文、逆指値注文など複数の注文タイプに対応。
- リスク管理のためのストップロス、テイクプロフィット機能の組み込み。
- 取引戦略に応じた自動売買機能（アルゴリズムまたは機械学習を利用したシグナル生成）。
- 高頻度取引に対応：高速な通信と処理で、短時間に多数の取引を実行可能な設計とする。

【バックテスト機能】
- 過去1ヶ月分のヒストリカルデータを使用し、実際に取引を行った場合のシミュレーション（バックテスト）を実施。
- バックテスト結果として、累積利益、勝率、最大ドローダウン、シャープレシオなどの指標を出力し、戦略の有効性を評価。

【アルゴリズム／機械学習の戦略】
- ルールベース戦略：テクニカル指標（移動平均、RSI、MACD、ボリンジャーバンドなど）を用いたシグナル生成。
- 機械学習戦略：LSTMや強化学習を用いて最適なエントリー・エグジットタイミングを判定。
- 学習データの範囲：機械学習に用いるデータは1ヶ月分に限定せず、幅広い期間（例：数年分のデータ）を活用し、モデル精度の向上を図る。
- 複数の戦略を評価し、柔軟に切り替え可能な設計。

■ 2. 非機能要件

【セキュリティ】
- APIキー、シークレットの暗号化と安全な保存。
- SSL/TLSによる通信の暗号化、不正アクセス防止の仕組み。

【パフォーマンス】
- リアルタイムデータ取得や注文発注が遅延なく行えるように最適化。
- バックテスト処理において、大量データの高速処理を実現。
- 高頻度取引対応：大量の取引注文を短時間で処理するための最適化を図る。

【信頼性・安定性】
- 障害発生時の迅速なリカバリーやフェイルセーフ処理（自動停止、通知機能）の実装。
- テストネット上で十分な検証を行い、実運用前に安定性を確認。

【拡張性・保守性】
- 各機能（取引ロジック、データ取得、バックテスト、リスク管理、通知）をモジュール化し、疎結合な設計。
- バージョン管理システムを利用したソースコード管理により、将来的な拡張やメンテナンスを容易に。

■ 3. システム設計・運用要件

【システムアーキテクチャ】
- データ取得モジュール：bybitテストネットAPIからのリアルタイムおよびヒストリカルデータ取得。
- 取引モジュール：注文発注、キャンセル、約定確認など実際の取引処理を担当。
- バックテストモジュール：過去データを用いたシミュレーションによる戦略評価。
- 戦略モジュール：アルゴリズムまたは機械学習を利用したシグナル生成とその最適化。
- リスク管理モジュール：ポジションサイズや損切りラインなどの自動調整。
- 通知・ログモジュール：取引履歴、エラーログ、バックテスト結果のレポート作成と通知。

【バックテスト実行】
- 過去1ヶ月のヒストリカルデータに基づき、シミュレーション取引を実施。
- 累積利益、勝率、最大ドローダウン、シャープレシオ等の評価指標を自動生成し、戦略効果を検証。

【環境設定】
- 開発環境とテスト環境を明確に分離し、テストネットでの十分な動作確認を実施。
- 将来的な実運用（メインネット移行）に備え、APIエンドポイントの切り替えが容易な設計とする。
